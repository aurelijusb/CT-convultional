package lt.banelis.aurelijus;

import java.awt.BorderLayout;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Collection;
import javax.swing.JCheckBox;
import javax.swing.text.JTextComponent;
import lt.banelis.aurelijus.connectors.Decoder;
import lt.banelis.aurelijus.connectors.Encoder;
import lt.banelis.aurelijus.connectors.Noise;
import lt.banelis.aurelijus.data.AbstractDataStructure;
import lt.banelis.aurelijus.data.Bit;
import lt.banelis.aurelijus.data.BitsSteam;
import lt.banelis.aurelijus.data.Hightlighter;

/**
 * convolutional coding.
 * Hagelbarger
 * feedback decoder
 * 
 * @link http://www.ustudy.in/node/2654
 * 
 * @author Aurelijus Banelis
 */
public class Gui extends javax.swing.JFrame {
    private AbstractDataStructure sender = new Bit(true);
    private Encoder encoder = new Encoder();
    private AbstractDataStructure inputChannel = new BitsSteam(true);
    private Noise noise = new Noise();
    private AbstractDataStructure outputChannel = new BitsSteam(false);
    private Decoder decoder = new Decoder();
    private AbstractDataStructure receiver = new BitsSteam(false);
    
    public Gui() {
        initComponents();
        initialiseView();
    }
    
    private void initialiseView() {
        /* GUI */
        encoderPanel.add(sender, BorderLayout.CENTER);
        encoderPanel.add(encoder, BorderLayout.SOUTH);
        channelPanel.add(inputChannel);
        channelPanel.add(noise);
        channelPanel.add(noiseOptionsPanel);
        channelPanel.add(outputChannel);
        decoderPanel.add(decoder, BorderLayout.NORTH);
        decoderPanel.add(receiver, BorderLayout.CENTER);
        keyboardShortcuts();
        updateNoiseOptions();
        
        /* Synchronization and error marking */
        Hightlighter sourceDestination = new Hightlighter(sender, receiver, 6);
        sender.setHighliter(sourceDestination);
        receiver.setHighliter(sourceDestination);
        Hightlighter channel = new Hightlighter(inputChannel, outputChannel);
        inputChannel.setHighliter(channel);
        outputChannel.setHighliter(channel);
        inputChannel.setHalfSize(true);
        outputChannel.setHalfSize(true);
        
        /* Sending as user inputs data */
        sender.setListerer(new Runnable() {
            public void run() {
                encode();
                if (noiseProbabilityRadio.isSelected()) {
                    transfer();
                    decode();
                }
            }
        });
    }
    
    private void encode() {
        inputChannel.putData(encoder.transform(sender.retrieveData()));
    }
    
    private void transfer() {
        outputChannel.putData(noise.transform(inputChannel.retrieveData()));
    }
    
    private void decode() {
        receiver.putData(decoder.transform(outputChannel.retrieveData()));
    }
    
    private void keyboardShortcuts() {
        KeyListener globalKeyListener =  new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                if ( bitRadio.isSelected() && sender instanceof Bit &&
                     !(e.getComponent() instanceof JTextComponent) ) {
                    Bit bitSender = (Bit) sender;
                    if (e.getKeyChar() == '1') {
                        bitSender.putData(true);
                    } else if (e.getKeyChar() == '0') {
                        bitSender.putData(false);
                    }
                }
            }
        };
        Bit.globalKeyShortcuts(this, globalKeyListener);
    }
    
    private void updateNoiseOptions() {
        noise.setEnabled(noiseProbabilityRadio.isSelected());
        if (inputChannel instanceof BitsSteam) {
            BitsSteam bitsSteam = (BitsSteam) inputChannel;
            bitsSteam.setInputEnabled(noiseManualRadio.isSelected());
        }
        resendButton.setVisible(noiseManualRadio.isSelected());
    }
    
    /*
     * Autogenerated Swing components layout
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dataRadioGroup = new javax.swing.ButtonGroup();
        noiseOptionsGroup = new javax.swing.ButtonGroup();
        viewPanel = new javax.swing.JPanel();
        bitRadio = new javax.swing.JRadioButton();
        bitsRadio = new javax.swing.JRadioButton();
        textRadio = new javax.swing.JRadioButton();
        imageRadio = new javax.swing.JRadioButton();
        encoderPanel = new javax.swing.JPanel();
        channelPanel = new javax.swing.JPanel();
        noiseOptionsPanel = new javax.swing.JPanel();
        noiseProbabilityRadio = new javax.swing.JRadioButton();
        noiseManualRadio = new javax.swing.JRadioButton();
        resendButton = new javax.swing.JButton();
        decoderPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(300, 500));
        setPreferredSize(new java.awt.Dimension(600, 600));
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        viewPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Duomenų tipas"));
        viewPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        dataRadioGroup.add(bitRadio);
        bitRadio.setSelected(true);
        bitRadio.setText("Bitas");
        viewPanel.add(bitRadio);

        dataRadioGroup.add(bitsRadio);
        bitsRadio.setText("Dvejetainis žodis");
        viewPanel.add(bitsRadio);

        dataRadioGroup.add(textRadio);
        textRadio.setText("Tekstas");
        viewPanel.add(textRadio);

        dataRadioGroup.add(imageRadio);
        imageRadio.setText("Paveikslėlis");
        viewPanel.add(imageRadio);

        getContentPane().add(viewPanel);

        encoderPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Kodavimas"));
        encoderPanel.setLayout(new java.awt.BorderLayout());
        getContentPane().add(encoderPanel);

        channelPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Kanalas"));
        channelPanel.setLayout(new javax.swing.BoxLayout(channelPanel, javax.swing.BoxLayout.Y_AXIS));

        noiseOptionsPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        noiseOptionsGroup.add(noiseProbabilityRadio);
        noiseProbabilityRadio.setSelected(true);
        noiseProbabilityRadio.setText("Triukšmai pagal tikimybę");
        noiseProbabilityRadio.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                noiseProbabilityRadioStateChanged(evt);
            }
        });
        noiseOptionsPanel.add(noiseProbabilityRadio);

        noiseOptionsGroup.add(noiseManualRadio);
        noiseManualRadio.setText("Pasirinktų bitų iškraipymas");
        noiseManualRadio.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                noiseManualRadioStateChanged(evt);
            }
        });
        noiseOptionsPanel.add(noiseManualRadio);

        resendButton.setText("Siųsti kanalu");
        resendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resendButtonActionPerformed(evt);
            }
        });
        noiseOptionsPanel.add(resendButton);

        channelPanel.add(noiseOptionsPanel);

        getContentPane().add(channelPanel);

        decoderPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Dekodavimas"));
        decoderPanel.setLayout(new java.awt.BorderLayout());
        getContentPane().add(decoderPanel);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void noiseManualRadioStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_noiseManualRadioStateChanged
        updateNoiseOptions();
    }//GEN-LAST:event_noiseManualRadioStateChanged

    private void noiseProbabilityRadioStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_noiseProbabilityRadioStateChanged
        updateNoiseOptions();
    }//GEN-LAST:event_noiseProbabilityRadioStateChanged

    private void resendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resendButtonActionPerformed
        transfer();
        decode();
        inputChannel.repaint();
    }//GEN-LAST:event_resendButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gui().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton bitRadio;
    private javax.swing.JRadioButton bitsRadio;
    private javax.swing.JPanel channelPanel;
    private javax.swing.ButtonGroup dataRadioGroup;
    private javax.swing.JPanel decoderPanel;
    private javax.swing.JPanel encoderPanel;
    private javax.swing.JRadioButton imageRadio;
    private javax.swing.JRadioButton noiseManualRadio;
    private javax.swing.ButtonGroup noiseOptionsGroup;
    private javax.swing.JPanel noiseOptionsPanel;
    private javax.swing.JRadioButton noiseProbabilityRadio;
    private javax.swing.JButton resendButton;
    private javax.swing.JRadioButton textRadio;
    private javax.swing.JPanel viewPanel;
    // End of variables declaration//GEN-END:variables
}
